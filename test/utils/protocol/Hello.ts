// **********************************************************************
// Parsed By TarsParser(1.1.0), Generated By tars2node(20190529)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "Hello.tars" by Server Mode
// **********************************************************************

/* tslint:disable */
/* eslint-disable */

/// <reference types="node" />
import assert = require("assert");
import * as TarsStream from "@tars/stream";
import * as TarsRpc from "@tars/rpc";

const _hasOwnProperty = Object.prototype.hasOwnProperty;

export namespace Hello {
    export class TestReq {
        sName: string = "";
        iAge: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "Hello.TestReq";
        protected static _classname = "Hello.TestReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TestReq;
            tmp.sName = is.readString(0, false, "");
            tmp.iAge = is.readInt32(1, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.sName);
            os.writeInt32(1, this.iAge);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TestReq.Object { 
            return {
                sName: this.sName,
                iAge: this.iAge
            };
        }

        readFromObject(json: TestReq.Object) { 
            _hasOwnProperty.call(json, "sName") && (this.sName = json.sName!);
            _hasOwnProperty.call(json, "iAge") && (this.iAge = json.iAge!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TestReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return Hello.TestReq._readFrom(is);
        }
    }

    export namespace TestReq {
        export interface Object {
            sName?: string;
            iAge?: number;
        }
    }

    export class TestRsp {
        iRet: number = 0;
        sMsg: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "Hello.TestRsp";
        protected static _classname = "Hello.TestRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TestRsp;
            tmp.iRet = is.readInt32(0, false, 0);
            tmp.sMsg = is.readString(1, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.iRet);
            os.writeString(1, this.sMsg);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TestRsp.Object { 
            return {
                iRet: this.iRet,
                sMsg: this.sMsg
            };
        }

        readFromObject(json: TestRsp.Object) { 
            _hasOwnProperty.call(json, "iRet") && (this.iRet = json.iRet!);
            _hasOwnProperty.call(json, "sMsg") && (this.sMsg = json.sMsg!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TestRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return Hello.TestRsp._readFrom(is);
        }
    }

    export namespace TestRsp {
        export interface Object {
            iRet?: number;
            sMsg?: string;
        }
    }

    export abstract class DemoImp { 
        _name!: string
        _worker!: any

        initialize(): PromiseLike<any> | void {}

        onDispatch(current: TarsRpc.TarsCurrent, funcName: string, binBuffer: TarsStream.BinBuffer) { 
            if ("__" + funcName in this) {
                return (this as any)["__" + funcName](current, binBuffer);
            } else {
                return TarsRpc.error.SERVER.FUNC_NOT_FOUND;
            }
        }

        __tars_ping(current: TarsRpc.TarsCurrent) { 
            const _ret = 0;
            if (current.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || current.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = current.getRequestVersion();
                tup.writeInt32("", _ret);

                current.doResponse(tup.encode());
            } else {
                const os = new TarsStream.TarsOutputStream();
                os.writeInt32(0, _ret);

                current.doResponse(os.getBinBuffer());
            }

            return TarsRpc.error.SUCCESS;
        }

        testFn(current: DemoImp.testFnCurrent, iLen: number, sName: string, stReq: Hello.TestReq, iWidth: number, sFullName: string, stRsp: Hello.TestRsp): any { 
            assert.fail("testFn function not implemented");
        }

        protected static __testFn_responser(this: TarsRpc.TarsCurrent, _ret: number, iWidth: number, sFullName: string, stRsp: Hello.TestRsp) {
            if (this.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || this.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = this.getRequestVersion();
                tup.writeInt32("", _ret);
                tup.writeInt32("iWidth", iWidth);
                tup.writeString("sFullName", sFullName);
                tup.writeStruct("stRsp", stRsp);

                this.doResponse(tup.encode());
            } else {
                const os = new TarsStream.TarsOutputStream();
                os.writeInt32(0, _ret);
                os.writeInt32(4, iWidth);
                os.writeString(5, sFullName);
                os.writeStruct(6, stRsp);

                this.doResponse(os.getBinBuffer());
            }
        }

        protected __testFn(current: TarsRpc.TarsCurrent, binBuffer: TarsStream.BinBuffer) {
            let iLen: number;
            let sName: string;
            let stReq: Hello.TestReq;
            let iWidth: number;
            let sFullName: string;
            let stRsp: Hello.TestRsp;

            if (current.getRequestVersion() === TarsStream.Tup.TUP_SIMPLE || current.getRequestVersion() === TarsStream.Tup.TUP_COMPLEX) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = current.getRequestVersion();
                tup.decode(binBuffer);
                iLen = tup.readInt32("iLen");
                sName = tup.readString("sName");
                stReq = tup.readStruct("stReq", Hello.TestReq);
                iWidth = tup.readInt32("iWidth", 0);
                sFullName = tup.readString("sFullName", "");
                stRsp = tup.readStruct("stRsp", Hello.TestRsp, new Hello.TestRsp);
            } else {
                const is = new TarsStream.TarsInputStream(binBuffer);
                iLen = is.readInt32(1, true, 0);
                sName = is.readString(2, true, "");
                stReq = is.readStruct(3, true, Hello.TestReq);
                iWidth = is.readInt32(4, false, 0);
                sFullName = is.readString(5, false, "");
                stRsp = is.readStruct(6, false, Hello.TestRsp);
            }

            current.sendResponse = DemoImp.__testFn_responser;

            this.testFn(current, iLen, sName, stReq, iWidth, sFullName, stRsp);

            return TarsRpc.error.SUCCESS;
        }

    }

    export namespace DemoImp {
        export interface testFnCurrent extends TarsRpc.TarsCurrent {
            sendResponse(ret: number, iWidth: number, sFullName: string, stRsp: Hello.TestRsp): void;
        }
    }

}


